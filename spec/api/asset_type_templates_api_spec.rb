=begin
Talis Blueprint API

This is the API documentation for [Blueprint](https://github.com/talis/blueprint-server), a primitive for institutional structure and time periods

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for BlueprintClient::AssetTypeTemplatesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AssetTypeTemplatesApi' do
  before do
    # run before each test
    @instance = BlueprintClient::AssetTypeTemplatesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AssetTypeTemplatesApi' do
    it 'should create an instact of AssetTypeTemplatesApi' do
      @instance.should be_a(BlueprintClient::AssetTypeTemplatesApi)
    end
  end

  # unit tests for add
  # 
  # Configure a template for a given asset type
  # @param namespace identifier namespacing the blueprint.
  # @param asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc.
  # @param template_body template body
  # @param [Hash] opts the optional parameters
  # @return [TemplateBody]
  describe 'add test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete
  # 
  # Delete a template for a given asset type
  # @param namespace identifier namespacing the blueprint.
  # @param asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @return [TemplateBody]
  describe 'delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for put
  # 
  # update a template for a given asset type
  # @param namespace identifier namespacing the blueprint.
  # @param asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc.
  # @param template_body template body
  # @param [Hash] opts the optional parameters
  # @return [TemplateBody]
  describe 'put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
