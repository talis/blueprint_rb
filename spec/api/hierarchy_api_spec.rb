=begin
#Talis Blueprint API

#This is the API documentation for [Blueprint](https://github.com/talis/blueprint-server), a primitive for institutional structure and time periods

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for BlueprintClient::HierarchyApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'HierarchyApi' do
  before do
    # run before each test
    @instance = BlueprintClient::HierarchyApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of HierarchyApi' do
    it 'should create an instact of HierarchyApi' do
      expect(@instance).to be_instance_of(BlueprintClient::HierarchyApi)
    end
  end

  # unit tests for add_node
  # 
  # Add a node
  # @param namespace_inc_global identifier namespacing the blueprint. &#x60;global&#x60; is a special namespace which references data from all blueprints in the call.
  # @param body node
  # @param [Hash] opts the optional parameters
  # @return [NodeBody]
  describe 'add_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_upload
  # 
  # Send operations to modify nodes in bulk, to be applied/rejected as a single transaction. Format will be:    OLD NODE TYPE, OLD NODE ID, NEW NODE TYPE, NEW NODE ID, PARENTS, TITLE, DESCRIPTION, DOMAIN IDS, STUDENT NUMBERS 
  # @param namespace identifier namespacing the blueprint.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'bulk_upload test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_node
  # 
  # Delete a node
  # @param namespace identifier namespacing the blueprint.
  # @param id id identifying a domain model
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_hierarchy
  # 
  # Download the blueprint&#39;s nodes in CSV format Format will be:    OLD NODE TYPE, OLD NODE ID, NEW NODE TYPE, NEW NODE ID, PARENTS, TITLE, DESCRIPTION, DOMAIN IDS, STUDENT NUMBERS  OLD NODE TYPE and OLD NODE ID are left intentionally blank to allow direct upload of the output back into the bulk importer 
  # @param namespace identifier namespacing the blueprint.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'export_hierarchy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ancestors
  # Get ancestor nodes
  # A proxy for finding ancestors of a given node, equivalent to &#x60;/1/abc/nodes?filter[descendant]&#x3D;department%2Fdep101&#x60; 
  # @param id id identifying a domain model
  # @param namespace identifier namespacing the blueprint.
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :offset index to start result set from
  # @option opts [Float] :limit number of records to return
  # @return [NodeResultSet]
  describe 'get_ancestors test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_children
  # Get child nodes
  # A proxy for finding children of a given node, equivalent to &#x60;/1/abc/nodes?filter[parent]&#x3D;department%2Fdep101&#x60; 
  # @param id id identifying a domain model
  # @param namespace identifier namespacing the blueprint.
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :offset index to start result set from
  # @option opts [Float] :limit number of records to return
  # @return [NodeResultSet]
  describe 'get_children test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_descendants
  # Get descendant nodes
  # A proxy for finding descendants of a given node, equivalent to &#x60;/1/abc/nodes?filter[ancestor]&#x3D;department%2Fdep101&#x60; 
  # @param id id identifying a domain model
  # @param namespace identifier namespacing the blueprint.
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :offset index to start result set from
  # @option opts [Float] :limit number of records to return
  # @return [NodeResultSet]
  describe 'get_descendants test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_node
  # 
  # Get details of a given node
  # @param namespace identifier namespacing the blueprint.
  # @param id id identifying a domain model
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :include comma separated list of elements to hydrate. Can include children, parents, and/or assets
  # @return [NodeBody]
  describe 'get_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_parents
  # Get parent nodes
  # A proxy for finding parents of a given node, equivalent to &#x60;/1/abc/nodes?filter[child]&#x3D;department%2Fdep101&#x60; 
  # @param id id identifying a domain model
  # @param namespace identifier namespacing the blueprint.
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :offset index to start result set from
  # @option opts [Float] :limit number of records to return
  # @return [NodeResultSet]
  describe 'get_parents test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_node
  # 
  # Replaces the node with the data sent in the body
  # @param namespace identifier namespacing the blueprint.
  # @param id id identifying a domain model
  # @param body node
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @return [NodeBody]
  describe 'replace_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_nodes
  # Search nodes
  # This endpoint is a really flexible way to ask questions about the hierarchy. for example:  ###### Find all nodes for abc: &#x60;/1/abc/nodes&#x60;  ###### Find all modules for abc: &#x60;/1/abc/nodes?filter[nodeType]&#x3D;Modules&#x60;  ###### Find all nodes that are descendants of DEP101: &#x60;/1/abc/nodes?filter[descendant]&#x3D;departments%2Fdep101&#x60;  ###### Find all Departments that are ancestors of ABF203: &#x60;/1/abc/nodes?filter[descendant]&#x3D;modules%2Fabf203&amp;filter[nodeType]&#x3D;Departments&#x60; # &lt;&#x3D; case insensitive  ###### Find all nodes with list assets that are descendants of DEP101 for abc: &#x60;/1/abc/nodes?filter[nodeType]&#x3D;Modules&amp;filter[ancestor]&#x3D;departments%2FDEP101&amp;filter[hasAssets]&#x3D;true&amp;filter[assetType]&#x3D;Lists&#x60;  ###### Globally, find all modules that have no list assets &#x60;/1/global/nodes?filter[nodeType]&#x3D;Modules&amp;filter[hasAssets]&#x3D;false&amp;filter[assetType]&#x3D;Lists&#x60;  ###### Find all nodes of type modules during 2015 that have no assets. Note a node&#39;s valid_from/valid_to just need to overlap from/to to qualify &#x60;/1/global/nodes?filter[nodeType]&#x3D;Modules&amp;filter[hasAssets]&#x3D;false&amp;filter[from]&#x3D;20150101&amp;filter[to]&#x3D;20151231&#x60; 
  # @param namespace_inc_global identifier namespacing the blueprint. &#x60;global&#x60; is a special namespace which references data from all blueprints in the call.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :offset index to start result set from
  # @option opts [Float] :limit number of records to return
  # @option opts [Array<String>] :include comma separated list of elements to hydrate. Can include children, parents, and/or assets
  # @option opts [Array<String>] :filter_node_type type of nodes to return
  # @option opts [Array<String>] :filter_child limit to nodes with children matching type/code
  # @option opts [Array<String>] :filter_parent limit to nodes with parent matching type/code
  # @option opts [Array<String>] :filter_ancestor limit to nodes with ancestor matching type/code
  # @option opts [Array<String>] :filter_descendant limit to nodes with descendant matching type/code
  # @option opts [BOOLEAN] :filter_has_assets limit to either nodes that have assets (true) nodes that have no assets (false) or omit to consider both nodes with and without assets
  # @option opts [Array<String>] :filter_asset_type type of asset to return
  # @option opts [Date] :filter_from limit to results valid after this date, format is  ISO8601 date
  # @option opts [Date] :filter_to limit to results valid before this date, format is  ISO8601
  # @option opts [String] :q_node query term(s) to search for nodes.  Allows wildcard searching with &#39;*&#39;
  # @option opts [String] :q_child query id/title terms to search for child nodes.  Allows wildcard searching with &#39;*&#39;
  # @option opts [String] :q_parent query id/title terms to search for parent nodes.  Allows wildcard searching with &#39;*&#39;
  # @option opts [String] :q_descendant query id/title terms to search for descendant nodes.  Allows wildcard searching with &#39;*&#39;
  # @option opts [String] :q_ancestor query id/title terms to search for ancestor nodes.  Allows wildcard searching with &#39;*&#39;
  # @return [NodeResultSet]
  describe 'search_nodes test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_node
  # 
  # Perform a partial update of a node
  # @param namespace identifier namespacing the blueprint.
  # @param id id identifying a domain model
  # @param body node
  # @param type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc.
  # @param [Hash] opts the optional parameters
  # @return [NodeBody]
  describe 'update_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
